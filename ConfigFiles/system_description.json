{"Components":  {"c1": {"memory": 10},  # This section reports the memory requirement for each component in MB.
                 "c2": {"memory": 12.5},
                 "c3": {"memory": 100},
                 "c4": {"memory": 27},
                 "c5": {"memory": 27}
               },
               
 # This section reports the information of computational layers and the resources which are located in Edge or cloud.
 
 # The computational layers describe the candidate resources for the selection, 
 # and across the candidate resources, at most one device will be picked for execution in each layer.
 # For each device, the device model is mentioned in description field and it's memory capacity and cost is reported.
 # The maximum number of devices, which is reported by "number" in EdgeResources is equal to one for all layers,
 # while the maximum number of instances for VM types, which is reported by "number" in CloudResources, can be more than one.
   
 "EdgeResources": {"computationallayer1":   {"Drone1": {"description":"DJI Mini 2 Without GPU ", "number": 1, "cost": 4.5454,  "memory": 100},
                                             "Drone2": {"description":"DJI Mini 2 With a Tegra GPU ", "number": 1, "cost": 6.8181,  "memory": 200}
                                             },
                   "computationallayer2":   {"EN1": {"description":"Asus Zenbook 13 UX325EA", "number": 1, "cost": 4.5454,  "memory": 500},
                                             "EN2":   {"description":"Microsoft Surface Studio 2 LAM-00005 ", "number": 1, "cost": 9.0909, "memory": 1000}
                                             }
                 },

 "CloudResources": {"computationallayer3":  {"VM1": {"description":"AWS g3s.xlarge", "number": 3, "cost": 0.75, "memory": 500 },
                                             "VM2": {"description":"AWS g3.4xlarge", "number": 4, "cost": 1.14, "memory": 1000 }
                                            }
                   },
 # For the serverless resources, an extra field is expiration time thereshold which is reported by "idle_time_before_kill". 
 # When a user invokes a function, FaaS keeps the container running for the expiration time after the execution of the function.
 # Moreover,an additional cost, "transition_cost", might be incurred for each invocation to account for the message passing and coordination between two successive functions. 
 # But, with some third party frameworks like OSCAR the orchestration can be supported by an architectural component avoiding transition costs.
  
  "FaaSResources": {"computationallayer4":   {"F1":    {"description":"AWS Lambda with 50 MB memory size","cost": 0.06003, "memory": 50, 
                                                     "idle_time_before_kill": 600},
                                            "F2":    {"description":"AWS Lambda with 200 MB memory size", "cost": 0.54027, "memory": 200, 
                                                     "idle_time_before_kill": 600},
                                            "F3":    {"description":"AWS Lambda with 80 MB memory size", "cost": 0.162081, "memory": 80, 
                                                     "idle_time_before_kill": 600},
                                            "F4":    {"description":"AWS Lambda with 300 MB memory size", "cost": 0.96048, "memory": 300, 
                                                     "idle_time_before_kill": 600},
                                            "F5":    {"description":"AWS Lambda with 300 MB memory size", "cost": 0.828, "memory": 300, 
                                                     "idle_time_before_kill": 600}
                                            
                                            },
                                        
                   "transition_cost": 0
                  },
 
# All the possible component-to-device assignments is characterized by "CompatibilityMatrix" 
# which shows each component can be run on which devices.       
 "CompatibilityMatrix": {"c1": ["Drone1", "Drone2"],
                         "c2": ["Drone1", "Drone2", "EN1", "EN2","VM1","VM2", "F1"],
                         "c3": ["EN1", "EN2", "VM1","VM2", "F2"],
                         "c4": ["VM1","VM2", "F3"],
                         "c5": ["F4", "F5"]
                         },
# In order to evaluate the performance of components deployed on resources, demanding time is characterized which denotes the time 
# required to run each component on it's all possible devices.
# If the resource is FaaS, the execution times of hot and cold requests are needed to compute the average execution time 
# for each component on a given function configuration.            
 "DemandMatrix": {"c1": {"Drone1": 1.26,
                         "Drone2": 1},
                  "c2": {"Drone1": 1.2,
                         "Drone2": 0.79,
                         "EN1": 1, 
                         "EN2": 0.05,
                         "VM1": 0.0125,
                         "VM2": 0.01,
                         "F1": [0.25, 0.3]},
                  "c3": {"EN1": 5, 
                         "EN2": 0.5,
                         "VM1": 0.1125,
                         "VM2": 0.09,
                         "F2": [2.25, 2.7]},
                  "c4": {"VM1": 0.03375,
                         "VM2": 0.027,
                         "F3": [0.675, 0.945]},
                  "c5": {"F4": [4, 4.8],
                         "F5": [2.3, 2.76]
                         }
                 },
 # Input exogenous workload called Lambda (expressed in terms of requests/sec).
 "Lambda": 0.25,

# This section introduces the upper bound constraints for execution time of sinle component. 
 "LocalConstraints":  {
                       "c5": {"local_res_time": 2.5}
                         
                        
                   },
                   
# Vice versa, this section introduces the upper bound constraints for execution time of a sequence of components. 
"GlobalConstraints":   {
                        "p1": {"components": ["c1", "c2", "c3", "c4"], "global_res_time": 2}
                    },                

# This section characterizes the network technology that layers use it to transfer data among the components. 
# Each type of network technology is denoted by "ND" (which is stand for Network Domain) 
# and characterized by two properties: "AccessDelay" and "Bandwidth" expressed in terms of second and Mb per second, respectively.
# Each layer can be located in one or more network domains.

"NetworkTechnology":    {"ND1": { "computationallayers": ["computationallayer1", "computationallayer2"], "AccessDelay": 0.000277,  "Bandwidth": 150},
                         "ND2": { "computationallayers": ["computationallayer1", "computationallayer2", "computationallayer3", "computationallayer4"] , "AccessDelay": 0.000277,  "Bandwidth": 20},
                         "ND3": { "computationallayers": ["computationallayer3", "computationallayer4"], "AccessDelay": 0,  "Bandwidth": 1000000}
                        },
# For each component we specify which are the following components to create the directed edges of DAG, transition probability of the directed edges 
# and data transfer size related to the directed edge in MB.                      
"DirectedAcyclicGraph":   {"c1":  {"next": ["c2"], "transition_probability": [0.9], "data_size": [4]},
                   "c2":  {"next": ["c3"], "transition_probability": [1], "data_size": [6]},
                   "c3":  {"next": ["c4"], "transition_probability": [1], "data_size": [4]},
                   "c4":  {"next": ["c5"], "transition_probability": [0.1], "data_size": [4]}
           },
# The time analysis is considered equal to one hour.
"Time" :   1
 
 
}
